<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oh My God</title>
  
  
  <link href="https://idinghy.com/atom.xml" rel="self"/>
  
  <link href="https://idinghy.com/"/>
  <updated>2020-11-29T11:29:00.292Z</updated>
  <id>https://idinghy.com/</id>
  
  <author>
    <name>Dinghy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OpenGL学习笔记-环境搭建</title>
    <link href="https://idinghy.com/2020/11/29/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://idinghy.com/2020/11/29/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2020-11-29T09:09:29.000Z</published>
    <updated>2020-11-29T11:29:00.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="教程说明"><a href="#教程说明" class="headerlink" title="教程说明"></a>教程说明</h1><p>来自( <a href="https://learnopengl-cn.github.io/)%EF%BC%8C%E6%84%9F%E8%B0%A2%E5%8E%9F%E4%BD%9C%E8%80%85JoeyDeVries%E5%92%8C%E5%90%84%E4%BD%8D%E4%B8%AD%E6%96%87%E7%BF%BB%E8%AF%91%E8%80%85%E6%8F%90%E4%BE%9B%E7%9A%84%E4%BC%98%E8%B4%A8%E6%95%99%E7%A8%8B">https://learnopengl-cn.github.io/)，感谢原作者JoeyDeVries和各位中文翻译者提供的优质教程</a></p><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><h2 id="Microsoft-Visual-Studio下载"><a href="#Microsoft-Visual-Studio下载" class="headerlink" title="Microsoft Visual Studio下载"></a>Microsoft Visual Studio<a href="https://visualstudio.microsoft.com/zh-hans/vs/older-downloads/">下载</a></h2><p>cn_visual_studio_enterprise_2015_with_update_3_x86_x64_dvd_8923298.iso</p><blockquote><p>链接：<a href="https://pan.baidu.com/s/1SsdU0R25Lk6sTedumYIeSw">https://pan.baidu.com/s/1SsdU0R25Lk6sTedumYIeSw</a><br>提取码：dddd </p></blockquote><blockquote><p>激活密钥搬运来自<a href="https://blog.csdn.net/yhd0916/article/details/73368826">这里</a>(感恩)<br>专业版：HMGNV-WCYXV-X7G9W-YCX63-B98R2<br>企业版：HM6NR-QXX7C-DFW2Y-8B82K-WTYJV</p></blockquote><ul><li>解压后运行<em>vs_enterprise.exe</em>，</li></ul><h2 id="GLFW下载"><a href="#GLFW下载" class="headerlink" title="GLFW下载"></a>GLFW<a href="https://www.glfw.org/download.html">下载</a></h2><p>下载souce package(<strong>glfw-3.3.2.zip</strong>)<br>GLFW是一个专门针对OpenGL的C语言库，它提供了一些渲染物体所需的最低限度的接口。它允许用户创建OpenGL上下文，定义窗口参数以及处理用户输入。下载源码包之后，将其解压并打开。下载源码包之后，将其解压并打开。我们只需要里面的这些内容：</p><ul><li>编译生成的库(glfw3.lib之后生成)</li><li>include文件夹</li></ul><h2 id="CMAKE-下载"><a href="#CMAKE-下载" class="headerlink" title="CMAKE 下载"></a>CMAKE <a href="https://cmake.org/download/">下载</a></h2><p>下载Windows win32-x86 Installer(<strong>cmake-3.19.1-win32-x86.msi</strong>)<br>CMake是一个工程文件生成工具。用户可以使用预定义好的CMake脚本，根据自己的选择（像是Visual Studio, Code::Blocks, Eclipse）生成不同IDE的工程文件。这允许我们从GLFW源码里创建一个Visual Studio 2015工程文件，之后进行编译。<br>安装好cmake之后，打开cmake-gui</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/1.png" alt="description"></p></center><p>CMake需要一个源代码目录和一个存放编译结果的目标文件目录。源代码目录我们选择GLFW的源代码的根目录，然后我们新建一个 build 文件夹，选中作为目标目录。</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/2.png" alt="description"></p></center>我们接下来需要选择工程的生成器，由于我们使用的是Visual Studio 2015，我们选择 Visual Studio 14 选项（因为Visual Studio 2015的内部版本号是14）。CMake会显示可选的编译选项用来配置最终生成的库。这里我们使用默认设置，并再次点击Configure(设置)按钮保存设置。保存之后，点击Generate(生成)按钮，生成的工程文件会在你的build文件夹中。<center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/3.png" alt="description"></p></center><p><strong>问题</strong><br><a href="https://stackoverflow.com/questions/43704734/how-to-fix-the-error-windows-sdk-version-8-1-was-not-found">error MSB8036: The Windows SDK version 8.1 was not found.</a></p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/4.png" alt="description"></p></center><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>在build文件夹里可以找到GLFW.sln文件，用Visual Studio 2015打开。因为CMake已经配置好了项目，所以我们直接点击Build Solution(生成解决方案)按钮，然后编译的库glfw3.lib（注意我们用的是第3版）就会出现在src/Debug文件夹内。</p><p>库生成完毕之后，我们需要让IDE知道库和头文件的位置。有两种方法：</p><ol><li>找到IDE或者编译器的/lib和/include文件夹，添加GLFW的include文件夹里的文件到IDE的/include文件夹里去。用类似的方法，将glfw3.lib添加到/lib文件夹里去。虽然这样能工作，但这不是推荐的方式，因为这样会让你很难去管理库和include文件，而且重新安装IDE或编译器可能会导致这些文件丢失。</li><li>推荐的方式是建立一个新的目录包含所有的第三方库文件和头文件，并且在你的IDE或编译器中指定这些文件夹。我个人会使用一个单独的文件夹，里面包含Libs和Include文件夹，在这里存放OpenGL工程用到的所有第三方库和头文件。这样我的所有第三方库都在同一个位置（并且可以共享至多台电脑）。然而这要求你每次新建一个工程时都需要告诉IDE/编译器在哪能找到这些目录。<br>完成上面步骤后，我们就可以使用GLFW创建我们的第一个OpenGL工程了！</li></ol><p>选择第二种方式：</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/5.png" alt="description"></p></center><h2 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h2><p>首先，打开Visual Studio，创建一个新的项目。如果VS提供了多个选项，选择Visual C++，然后选择Empty Project(空项目)（别忘了给你的项目起一个合适的名字）。现在我们终于有一个空的工作空间了，开始创建我们第一个OpenGL程序吧！</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/6.png" alt="description"></p></center><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>为了使我们的程序使用GLFW，我们需要把GLFW库链接(Link)进工程。这可以通过在链接器的设置里指定我们要使用glfw3.lib来完成，但是由于我们将第三方库放在另外的目录中，我们的工程还不知道在哪寻找这个文件。于是我们首先需要将我们放第三方库的目录添加进设置。</p><p>要添加这些目录（需要VS搜索库和include文件的地方），我们首先进入Project Properties(工程属性，在解决方案窗口里右键项目)，然后选择VC++ Directories(VC++ 目录)选项卡（如下图）。在下面的两栏添加目录：</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/7.png" alt="description"></p></center>现在VS可以找到所需的所有文件了，最后需要在Linker(链接器)选项卡里的Input(输入)选项卡里添加glfw3.lib和opengl32.lib（我是Windows平台，opengl32.lib已经包含在Microsoft SDK里了，它在Visual Studio安装的时候就默认安装了，我们只需将opengl32.lib直接添加进连接器设置里就行了）<center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/8.png" alt="description"></p></center>GLFW的安装与配置就到此为止。<h2 id="GLAD"><a href="#GLAD" class="headerlink" title="GLAD"></a>GLAD</h2><p>GLAD是一个开源的库，它能解决我们上面提到的那个繁琐的问题。GLAD的配置与大多数的开源库有些许的不同，GLAD使用了一个在线服务。在这里我们能够告诉GLAD需要定义的OpenGL版本，并且根据这个版本加载所有相关的OpenGL函数。</p><blockquote><p>因为OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。幸运的是，有些库能简化此过程，其中GLAD是目前最新，也是最流行的库。</p></blockquote><p>打开<a href="https://glad.dav1d.de/">GLAD的在线服务</a>，将语言(Language)设置为C/C++，在API选项中，选择3.3以上的OpenGL(gl)版本（我们的教程中将使用3.3版本，但更新的版本也能正常工作）。之后将模式(Profile)设置为Core，并且保证生成加载器(Generate a loader)的选项是选中的。现在可以先（暂时）忽略拓展(Extensions)中的内容。都选择完之后，点击生成(Generate)按钮来生成库文件。</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/9.png" alt="description"></p></center><p>GLAD现在应该提供给你了一个zip压缩文件，包含两个头文件目录，和一个glad.c文件。将两个头文件目录（glad和KHR）复制到你的Include文件夹中（或者增加一个额外的项目指向这些目录），并添加glad.c文件到你的工程中。</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/10.png" alt="description"></p></center><p>经过前面的这些步骤之后，你就应该可以将以下的指令加到你的文件顶部了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glad/glad.h&gt; </span></span></span><br></pre></td></tr></table></figure><p>新建main.cpp,测试输出。</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201125/11.png" alt="description"></p></center>点击编译按钮应该不会给你提示任何的错误。]]></content>
    
    
    <summary type="html">本文是个人学习记录，学习建议看教程</summary>
    
    
    
    <category term="Learning" scheme="https://idinghy.com/category/Learning/"/>
    
    
    <category term="OpenGL" scheme="https://idinghy.com/tag/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL学习笔记</title>
    <link href="https://idinghy.com/2020/11/29/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://idinghy.com/2020/11/29/OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-11-29T07:53:14.000Z</published>
    <updated>2020-11-29T09:07:06.930Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>出于学习需要，要开始opengl的学习啦（小白哭泣）。这个标签下将记录一下个人的学习笔记还有一些学习资源。主要是跟着教程跑一遍 ，希望能实践+了解原理。</p><ul><li><a href="https://learnopengl-cn.github.io/">教程中文版</a></li><li><a href="https://learnopengl.com/">教程英文版</a></li><li>辅助书籍《OpenGL SuperBible》第七版</li></ul><p>感谢<a href="https://joeydevries.com/#home">Joey de Vries</a>大佬，大爱翻译团队！</p><h1 id="OpenGL"><a href="#OpenGL" class="headerlink" title="OpenGL"></a>OpenGL</h1><p><a href="https://zh.wikipedia.org/wiki/OpenGL">OpenGL</a>（英语：Open Graphics Library，译名：开放图形库或者“开放式图形库”）是用于渲染2D、3D矢量图形的跨语言、跨平台的应用程序编程接口（API）。这个接口由近350个不同的函数调用组成，用来从简单的图形比特绘制复杂的三维景象。而另一种程序接口系统是仅用于Microsoft Windows上的<strong>Direct3D</strong>。OpenGL常用于CAD、虚拟现实、科学可视化程序和电子游戏开发。</p><p>更确切的说，openGL是一个关于图形的API的规范（specification），比如给出IDL(interface definition language)。OpenGL API是一套接口，学习这套接口，就可以在那些支持OpenGL的机器上正常使用这些接口，在屏幕上看到绘制的结果。</p><p>OpenGL不仅语言无关，而且平台无关。规范只字未提获得和管理OpenGL上下文相关的内容，而是将这些作为细节交给底层的窗口系统。出于同样的原因，OpenGL纯粹专注于渲染，而不提供输入、音频以及窗口相关的API。OpenGL被设计为只有输出的，所以它只提供渲染功能。核心API没有窗口系统、音频、打印、键盘／鼠标或其他输入设备的概念。虽然这一开始看起来像是一种限制，但它允许进行渲染的代码完全独立于他运行的操作系统，允许跨平台开发。</p><p>这套接口是Khronos这个组织在维护，怎么维护呢?就是写一个说明书，指导各个GPU厂家，如果他们要支持OpenGL的话，要怎么实现一个具体的OpenGL库。Khronos说要实现glDrawArray这个接口，那么厂家就得在他的库里实现这个接口。如果不实现，那么就不算支持OpenGL。也有一些接口不一定要实现（GPU供应商可以通过扩展形式提供额外功能）。</p><p>Khronos每隔一段时间发布一个新的OpenGL API版本，就是发布这个说明书。一般两个，一个是core profile，一定要实现的，还有另一个是为了兼容旧版本接口的说明书。厂家实现的OpenGL库的内容其实就是厂家自己的团队整合自己的图形知识以及GPU硬件的指令。</p><p>OpenGL 上下文（英语：OpenGL context）的创建过程相当复杂，在不同的操作系统上也需要不同的做法。因此很多游戏开发和用户界面库都提供自动创建 OpenGL 上下文的功能。有一些库是专门用来创建OpenGL窗口的，其中最早的便是 <strong>GLUT</strong>，后被freeglut取代，比较新的也有 <strong>GLFW</strong>可以使用。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>使用的是windows环境下glfw + opengl3.3</p><p>会首先讨论核心的图形学概念，OpenGL怎样将像素绘制到屏幕上，以及如何利用黑科技做出一些很酷的效果。</p><p>除了核心概念之外，我们还会讨论许多有用的技巧，它们都可以用在你的程序中，比如说在场景中移动，做出漂亮的光照，加载建模软件导出的自定义模型，做一些很酷的后期处理技巧等。最后，我们也将会使用我们已学的知识从头开始做一个小游戏，让你真正体验一把图形编程的魅力。</p><h2 id="一些链接："><a href="#一些链接：" class="headerlink" title="一些链接："></a>一些链接：</h2><ul><li><a href="https://zh.wikipedia.org/wiki/OpenGL">OpenGL的wiki</a></li><li><a href="https://www.zhihu.com/question/51867884">OpenGL是什么? - 知乎</a></li><li><a href="https://www.jianshu.com/p/96ee2cdb10c0">OpenGL特点</a></li><li><a href="https://learnopengl-cn.github.io/">教程中文版</a></li><li><a href="https://learnopengl.com/">教程英文版</a></li><li><a href="https://joeydevries.com/#home">Joey de Vries</a></li><li>教程笔记参考 <a href="https://www.cnblogs.com/zhxmdefj/category/1502112.html">https://www.cnblogs.com/zhxmdefj/category/1502112.html</a></li></ul>]]></content>
    
    
    <summary type="html">从开始到结(fang)束(qi)</summary>
    
    
    
    <category term="Learning" scheme="https://idinghy.com/category/Learning/"/>
    
    
    <category term="OpenGL" scheme="https://idinghy.com/tag/OpenGL/"/>
    
  </entry>
  
  <entry>
    <title>套模板，搞论文</title>
    <link href="https://idinghy.com/2020/11/29/%E5%A5%97%E6%A8%A1%E6%9D%BF%EF%BC%8C%E6%90%9E%E8%AE%BA%E6%96%87/"/>
    <id>https://idinghy.com/2020/11/29/%E5%A5%97%E6%A8%A1%E6%9D%BF%EF%BC%8C%E6%90%9E%E8%AE%BA%E6%96%87/</id>
    <published>2020-11-29T07:18:39.000Z</published>
    <updated>2020-11-29T08:09:04.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="mac写论文环境配置"><a href="#mac写论文环境配置" class="headerlink" title="mac写论文环境配置"></a>mac写论文环境配置</h1><p>作为一个word没学好的手残玩家，写论文的时候一个格式清晰的latex模板简直救命。下文带大家一起配好环境，让我们一起为写论文秃头吧！</p><p>btw，我用的是mac环境下mactex + sublime + skim（好处不知道，害挺好用就是了）。将你的mac联网插电，我们一起</p><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201129/say.jpg" alt="description"></p></center><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="安装MacTex"><a href="#安装MacTex" class="headerlink" title="安装MacTex"></a>安装MacTex</h3><ul><li>进入<a href="http://www.tug.org/mactex/">MacTeX官网</a>下载MacTeX.pkg文件。</li><li>下载完成之后，双击MacTeX.pkg进行安装。</li></ul><h3 id="安装Sublime-Text"><a href="#安装Sublime-Text" class="headerlink" title="安装Sublime Text"></a>安装Sublime Text</h3><ul><li>进入<a href="http://www.sublimetext.com/">Sublime Text官网</a>下载最新版本的Sublime Text。</li><li>下载完成之后，将文件拖入应用程序文件夹安装。</li></ul><h3 id="安装Skim"><a href="#安装Skim" class="headerlink" title="安装Skim"></a>安装Skim</h3><ul><li>进入<a href="https://skim-app.sourceforge.io/">Skim</a>下载Skim并安装</li><li>打开Skim，在菜单栏中<em>Skim &gt; Preference(选项) &gt; Sync(同步)</em></li><li>在预设菜单中选择Sublime Text</li></ul><h3 id="配置Sublime-Text"><a href="#配置Sublime-Text" class="headerlink" title="配置Sublime Text"></a>配置Sublime Text</h3><ol><li>安装<a href="https://packagecontrol.io/installation#Manual">Package Control</a></li><li>安装LaTeX Tools</li></ol><ul><li>方法一<br>step1. 按shift+cmd+p<br>step2. 输入install package并回车<br>step3. 输入latextools并回车，进行插件安装</li><li>方法二<br>step1. 在github上下载 LaTeXTools压缩包<a href="https://github.com/SublimeText/LaTeXTools/releases">https://github.com/SublimeText/LaTeXTools/releases</a><br>step2. 将文件解压，并改名为LaTeXools<br>step3. 在sublime text软件中，打开Preferences-&gt;Browse Pakages，进入的是名为Package的文件夹<br>step4. 将LaTexTools文件夹复制到step3中的Package路径下<br>step5. 重启sublime text。若成功，则Preferences-&gt;Package settings中将会显示LaTexTools，具体可参照：<a href="https://latextools.readthedocs.io/en/latest/install/">https://latextools.readthedocs.io/en/latest/install/</a></li></ul><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><ol><li>在sublime中<em>cmd + n</em>创建一个新文件，设置<em>Tools &gt; Build System &gt; LaTex</em>，输入以下代码：<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">%!TEX program &#x3D; xelatex  </span><br><span class="line">\documentclass&#123;article&#125;</span><br><span class="line">\usepackage&#123;xeCJK, fontspec, xunicode, xltxtra&#125;  </span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line">hello world!</span><br><span class="line">成功</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure></li><li><em>cmd + s</em>将文档保存为<em>XX.tex</em>文件</li><li>按<em>cmd+b</em> 编译并运行，显示如下预览结果</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201129/hello.png" alt="description"></p><p>就说明成功啦！<br>在预览的 PDF 中，若需要修改某部分内容，先在键盘上按下<em>shift+cmd</em>，然后鼠标点击需要修改的部分即可跳转到 Subime Text 中对应的内容</p><h2 id="模板导入"><a href="#模板导入" class="headerlink" title="模板导入"></a>模板导入</h2><ul><li>在项目主页<a href="http://haixing-hu.github.io/nju-thesis/">http://haixing-hu.github.io/nju-thesis/</a> 下载压缩包</li><li>在<a href="https://github.com/Haixing-Hu/latex-chinese-fonts">https://github.com/Haixing-Hu/latex-chinese-fonts</a> 下载字体包</li><li>在mac的Application中将Font Book打开，点击“+”把字体包子目录下所有Adobe打头的文件加进去就好了</li><li>把项目包解压了找到sample.tex用sublime打开，然后<em>cmd+b</em>，乖乖写论文吧。</li></ul><center><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201129/five.jpg" alt="description"></p></center><h2 id="福利"><a href="#福利" class="headerlink" title="福利"></a>福利</h2><p>搞个待填的坑，等我我我论文开始写了几个字分享个精简的模板以及一些latex使用套路，让写作人专注填字游戏！</p>]]></content>
    
    
    <summary type="html">mactex + sublime + skim + nju-thesis模板</summary>
    
    
    
    <category term="skill" scheme="https://idinghy.com/category/skill/"/>
    
    
    <category term="latex" scheme="https://idinghy.com/tag/latex/"/>
    
  </entry>
  
  <entry>
    <title>喜欢的音乐只有视频版怎么办呢</title>
    <link href="https://idinghy.com/2020/11/14/%E5%96%9C%E6%AC%A2%E7%9A%84%E9%9F%B3%E4%B9%90%E5%8F%AA%E6%9C%89%E8%A7%86%E9%A2%91%E7%89%88%E6%80%8E%E4%B9%88%E5%8A%9E%E5%91%A2/"/>
    <id>https://idinghy.com/2020/11/14/%E5%96%9C%E6%AC%A2%E7%9A%84%E9%9F%B3%E4%B9%90%E5%8F%AA%E6%9C%89%E8%A7%86%E9%A2%91%E7%89%88%E6%80%8E%E4%B9%88%E5%8A%9E%E5%91%A2/</id>
    <published>2020-11-14T07:27:39.000Z</published>
    <updated>2020-11-14T11:47:45.272Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>最近听到了一版小珍珠唱的惠化洞,实在是太喜欢这首歌+由小珍珠唱出来这首歌感觉真真太合适了,再加上最近恰逢想换手机铃声,在互联网上游了几天也没找到音频版的,于是打算自己动手,丰衣足食!</p><blockquote><p>所以这篇文章主要是讲怎么从一个视频中分离出音频,(如有侵权部分,可联系删除,先认个怂)</p></blockquote><h1 id="first"><a href="#first" class="headerlink" title="first"></a>first</h1><p>要达到以上目的,首先呢我们需要一个带有你感兴趣的音频的视频.如果通过其他渠道已经有了视频文件可以跳到下一步.对我来说想要的视频就是<a href="https://m.weibo.cn/5297266537/4331328251852312">这个微博</a>里的.</p><video width="480" height="320" controls><source src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201114/珍珠惠化洞.mp4"></video><p>在手机上可以离线缓存,但是我并没找到具体文件在哪(为什么iphone没有reveal to finder选项,蓝过),所以我用了<a href="https://weibo.iiilab.com/">https://weibo.iiilab.com/</a>,这个小工具就可以根据你提供的特定网址下载到了.</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201114/3.png" alt="description"></p><h1 id="second"><a href="#second" class="headerlink" title="second"></a>second</h1><p>然后我们就拥有了一个mp4文件,接着用<a href="https://audio-extractor.net/cn/">https://audio-extractor.net/cn/</a>这个工具,就可以分离出音频了.</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201114/4.png" alt="description"></p><h1 id="third"><a href="#third" class="headerlink" title="third"></a>third</h1><p>ok就这么简单,我们就拿到了想要的音频了!至于怎么在手机上成功设置成手机铃声呢.</p><ul><li>安卓<br>安卓很简单,看<a href="https://jingyan.baidu.com/article/67508eb488953bdccb1ce440.html">这里</a>.你把这个文件发给手机然后直接用音乐播放器打开,里面直接可以设置铃声,按照要求切割好了之后(一般铃声不建议超过30s),去设置里找到铃声设置的地方选到你刚刚切割好的铃声就好了.</li><li>苹果<br>苹果有点复杂(傲娇),看<a href="https://jingyan.baidu.com/article/295430f1f548a10c7e005019.html">这里</a>.首先你要在app store下载好库乐队.其实还是用你手机的播放器先打开,同样找到设置铃声,切割好命名好之后呢,就会自动跳转到库乐队,然后找到左上角的我的乐曲,选择好后点击共享,里面你就能看到手机铃声的选项.在iPhone上选择您的铃声。 添加铃声后，您可以从“设置”应用的“声音”部分中选择。打开“设置”应用，然后点击“声音”。点击“电话铃声”，就可以看到您的新铃声。</li></ul><h1 id="新铃声get"><a href="#新铃声get" class="headerlink" title="新铃声get!"></a>新铃声get!</h1><p>分享一下!如果有需要的留言!</p><audio width="480" height="320" controls><source src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201114/珍珠惠化洞.mp3"></audio><h1 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h1><p>贴一下如何在博客里添加视频和音频吧,看<a href="http://blog.yusank.space/HexoMedia.html/">这里</a>.</p>]]></content>
    
    
    <summary type="html">怎么从视频中分离出自己喜欢的音乐并设置为铃声</summary>
    
    
    
    <category term="skill" scheme="https://idinghy.com/category/skill/"/>
    
    
    <category term="interesting" scheme="https://idinghy.com/tag/interesting/"/>
    
  </entry>
  
  <entry>
    <title>小白建站攻略</title>
    <link href="https://idinghy.com/2020/11/06/%E5%B0%8F%E7%99%BD%E5%BB%BA%E7%AB%99%E6%94%BB%E7%95%A5/"/>
    <id>https://idinghy.com/2020/11/06/%E5%B0%8F%E7%99%BD%E5%BB%BA%E7%AB%99%E6%94%BB%E7%95%A5/</id>
    <published>2020-11-06T08:59:57.000Z</published>
    <updated>2020-11-14T11:14:42.766Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>想搞一个专属的博客hin久了,这篇文章写给那些想要搭建,却不知道从何入手的玩家.让我们先假设你有充分的想法要搭建一个独立博客了,假设你的电脑是mac(windows 也大同小异啦),然后再假设你觉得用github + hexo搭建的想法太棒了(别别问为什么这么假设),然后跟着我一起抄抄抄,先把博客跑起来吧!</p><blockquote><p>本文旨在提供一次本人的成功建站经历,给大家综合一下一条可行的道路.以小白的视角力图提供保姆级的攻略.当然有句名言说的好,具体情况具体分析,遇到奇奇怪怪的问题不要慌,百度谷歌搜起来.balabla这么多是希望有这个想法的人不要轻易放弃呀.<br>如果要放弃,那千万别先花钱买域名,然后白白浪费一两年的租金,别问我怎么知道的.爱过.</p></blockquote><p>以下内容基本是建站过程中看到的各个文章的拼凑,感谢各位大佬,文末会贴上出处.</p><h1 id="大概流程"><a href="#大概流程" class="headerlink" title="大概流程"></a>大概流程</h1><ul><li>安装必要软件Node.js 和 Git</li><li>部署hexo</li><li>链接github</li><li>域名购买和解析</li><li>基础运营</li></ul><h1 id="分步讲解"><a href="#分步讲解" class="headerlink" title="分步讲解"></a>分步讲解</h1><h2 id="第一步-安装Node-js和Git"><a href="#第一步-安装Node-js和Git" class="headerlink" title="第一步:安装Node.js和Git"></a>第一步:安装Node.js和Git</h2><p>具体软件的安装要看你是什么系统,网上攻略挺多的,可以参考<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">Node.js</a>和<a href="https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git">Git</a>.之后我们只需要在命令行操作即可.</p><h2 id="第二步-部署hexo"><a href="#第二步-部署hexo" class="headerlink" title="第二步:部署hexo"></a>第二步:部署hexo</h2><p>Hexo是一个轻量的静态博客框架,balabala,总之方便好用,现在已经比较成熟了(大概遇到的问题百度谷歌都有了,所以放心继续吧).简单来说就是我们利用它的框架,写markdown文件,再托管到GitHub Pages服务上,从具体使用来说就是你跑起来以后就是重复命令行和写markdown的事了(基本操作,进阶玩家可以研读一下代码然后在原始基础上完成自己独特的博客页面).</p><p>关于Hexo可以参考<a href="https://hexo.io/zh-cn/docs/">文档</a>,里面其实已经比较详细的介绍了如何使用hexo从安装到使用,以及每个部分的含义.从效率出发,我们拿出其中落到实处的操作贴一下.</p><h3 id="Hexo的安装"><a href="#Hexo的安装" class="headerlink" title="Hexo的安装"></a>Hexo的安装</h3><p>在终端执行(任意目录):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果出现command not found的问题,多半是Node.js安装有问题,目前安装Node.js顺带就会安装好了npm,可以用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>命令查看一下.</p><h3 id="Hexo的初始化"><a href="#Hexo的初始化" class="headerlink" title="Hexo的初始化"></a>Hexo的初始化</h3><p>在你想要的位置创建一个目录(这边目录为了省事用的是test,其实应该是你想要的github名字,所以要先去注册一个GitHub 帐号,看下面链接github部分第一个链接即可,然后命名这个文件夹为your_github_name.github.io),假设绝对路径为folder</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">hexo init  </span><br><span class="line">git init #建仓</span><br><span class="line">ls #查看目录文件</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/1.png" alt="description"><br><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/2.png" alt="description"><br><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/3.png" alt="description"></p><p>目录结构大概是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><p>简单了解一下hexo的<a href="https://hexo.io/zh-cn/docs/commands">指令</a>,我们用到的主要是以下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt; #新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</span><br><span class="line">hexo new [layout] &lt;title&gt;#新建文章 </span><br><span class="line">hexo clean #清除缓存文件 (db.json) 和已生成的静态文件 (public)。</span><br><span class="line">hexo generate #生成静态文件,可以简写为hexo g</span><br><span class="line">hexo server #启动服务器。默认情况下，访问网址为： http://localhost:4000/,可以简写为hexo s</span><br><span class="line">hexo deploy #部署网站,可以简写为hexo d</span><br></pre></td></tr></table></figure><p>此时你可以运行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在终端会看到:</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/4.png" alt="description"></p><p>打开这个网址,看到的是</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/5.png" alt="description"></p><p>就!对!啦!</p><h2 id="第三步-链接github-这部分搬运自here"><a href="#第三步-链接github-这部分搬运自here" class="headerlink" title="第三步:链接github(这部分搬运自here)"></a>第三步:链接github(这部分搬运自<a href="https://blog.aierui.com/a/16010316/">here</a>)</h2><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><p>如果没有github账号的筒子们要访问<a href="http://www.github.com/">官网</a>注册一下.</p><h3 id="配置和使用github-详细点击"><a href="#配置和使用github-详细点击" class="headerlink" title="配置和使用github(详细点击)"></a>配置和使用github(详细<a href="http://beiyuu.com/github-pages">点击</a>)</h3><p><strong><em>配置 SSH keys</em></strong></p><p>我们如何让本地git项目与远程的github建立联系呢？用SSH keys。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh 检查本机的ssh密钥</span><br></pre></td></tr></table></figure><p>如果提示：No such file or directory 说明你是第一次使用git。<br><strong><em>生成新的SSH Key：</em></strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;</span><br></pre></td></tr></table></figure><p>注意1: 此处的邮箱地址，你可以输入自己的邮箱地址；注意2: 此处的「-C」的是大写的「C」</p><p>然后系统会要你输入密码：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;</span><br><span class="line">Enter same passphrase again:&lt;再次输入加密串&gt;</span><br></pre></td></tr></table></figure><p>在回车中会提示你输入一个密码，这个密码会在你提交项目时使用，如果为空的话提交项目时则不用输入。这个设置是防止别人往你的项目里提交内容。</p><p>注意：输入密码的时候没有*字样的，你直接输入就可以了。</p><p>最后看到这样的界面，就成功设置ssh key了：</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/6.png" alt="description"></p><p><strong><em>添加 SSH Key 到 GitHub</em></strong></p><p>在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。</p><p>1、打开本地的id_rsa.pub文件(新生成的话在当时显示的文件夹/Users/your_user_directory/.ssh/id_rsa,因为我们是直接回车的,否则在~/.ssh/中)。此文件里面内容为刚才生成的密钥。如果看不到这个文件，你需要设置显示隐藏文件。准确的复制这个文件的内容，才能保证设置的成功。<br>2、登陆github系统。点击右上角的 Account Settings—&gt;SSH Public keys —&gt; add another public keys<br>3、把你本地生成的密钥复制到里面（key文本框中）， 点击 add key 就ok了</p><p><strong><em>测试</em></strong></p><p>可以输入下面的命令，看看设置是否成功，<a href="mailto:&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;">&#x67;&#105;&#x74;&#64;&#x67;&#105;&#x74;&#104;&#117;&#x62;&#46;&#99;&#111;&#x6d;</a>的部分不要修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果是下面的反馈：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes&#x2F;no)?</span><br></pre></td></tr></table></figure><p>不要紧张，输入yes就好，然后会看到：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi aierui! You’ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p><strong><em>设置用户信息</em></strong></p><p>现在你已经可以通过 SSH 链接到 GitHub 了，还有一些个人信息需要完善的。</p><p>Git 会根据用户的名字和邮箱来记录提交。GitHub 也是用这些信息来做权限的处理，输入下面的代码进行个人信息的设置，把名称和邮箱替换成你自己的.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;aierui&quot;//用户名</span><br><span class="line">git config --global user.email  &quot;imland@outlook.com&quot;//填写自己的邮箱    </span><br></pre></td></tr></table></figure><p><strong><em>SSH Key 配置成功</em></strong></p><p>本机已成功连接到 github。若有问题，请重新设置。常见错误请参考：<br><a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh">GitHub Help - Generating SSH Keys</a>和  <a href="https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/error-permission-denied-publickey">GitHub Help - Error Permission denied (publickey)</a>.</p><h3 id="在线预览"><a href="#在线预览" class="headerlink" title="在线预览"></a>在线预览</h3><p>终于,结束了漫长的枯燥的配置,我们要继续无聊的机械工作了.<br><strong><em>创建仓库和本地远程到GitHub仓库</em></strong></p><p>首先在GitHub上创建一个仓库repository，注意仓库名称必须为你的github用户名.github.io</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/7.png" alt="description"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将当前的改动暂存在本地仓库</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将暂存的改动提交到本地仓库，并写入本次提交的注释是”first post“</span></span><br><span class="line">git commit -m &quot;first post&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将远程仓库在本地添加一个引用：origin</span></span><br><span class="line">git remote add origin https://github.com/username/projectName.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 向origin推送gh-pages分支，该命令将会将本地分支gh-pages推送到github的远程仓库，并在远程仓库创建一个同名的分支。该命令后会提示输入用户名和密码。</span></span><br><span class="line">git push origin gh-pages</span><br></pre></td></tr></table></figure><p>在GitHub上将gh-pages merge 到msater上<br>这一步(黑色框)其实我没做,好像也没啥问题.</p><p><strong><em>添加部署代码</em></strong></p><p>在站点的_config.yml文件新增字段(分站点的_config.yml和主题的,站点的就在外层,主题的在themes/主题名字/里)<br>找到deploy站点部署,到github要配置这里, 非常重要</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git 部署类型若有问题，其他类型自行google之</span><br><span class="line">   repository: https:&#x2F;&#x2F;github.com&#x2F;Aierui&#x2F;aierui.github.io.git</span><br><span class="line">   branch: master</span><br><span class="line">   plugins: -hexo-generator-feed</span><br></pre></td></tr></table></figure><p>merge后就可以部署上去了(所以你没做我也没做的那一步就不用管这个)，在Git命令黑窗口里输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g #生成静态网页</span><br><span class="line">hexo d #开始部署</span><br></pre></td></tr></table></figure><p>然后在浏览器输入aierui.github.io（自己对应即可）,就可以看到和之前一样<br>(没改动就是本地搭建的原生hexo主页),至此基本功能就实现啦!</p><h2 id="第四步-域名购买和解析"><a href="#第四步-域名购买和解析" class="headerlink" title="第四步:域名购买和解析"></a>第四步:域名购买和解析</h2><p><strong>域名购买</strong></p><p>用github名来访问终究是太麻烦(不够cool!),所以有闲钱还推荐大家购买一下域名,解析一下就可以用你自己挑选的名字在互联网占有一址之地啦,学生党的话国内的阿里云和腾讯云似乎是有优惠的,可以去看看,.com的后缀名会贵点,.xyz这种就相对便宜了.<br>我用的是GODAddy,其他还有万网啊啥的,这个自选即可.以下购买部分教程来自<a href="https://www.zhihu.com/question/20463581/answer/25478916">这里</a>.<br>现在 <a href="https://sg.godaddy.com/zh">GoDaddy</a>已经有中文版了，虽然国家显示是新加坡，但不影响使用.</p><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/8.png" alt="description"></p><ul><li>查你想要的域名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/9.png" alt="description"></p><ul><li>查到适合的域名之后选择「添加到购物车」.</li><li>GoDaddy 其他域名收费服务，不要管，继续「进入购物车」,后面的服务全部点击「不，谢谢」，免费的服务也不要用.</li><li>确认购买 修改购买年限，默认是两年，可以修改成 1/2/3/5/10 年，随自己喜欢.</li><li>如果你不是土豪，可以上网搜 <a href="https://www.google.com/search?q=GoDaddy%20%E7%9A%84%E4%BC%98%E6%83%A0%E7%A0%81">GoDaddy 优惠码</a>，一般优惠幅度是 20%~ 30% 不等,可以多试试,说不定哪个更优惠.</li><li>点击「前去付款」,登录或注册界面，填完必要的信息之后，选择用支付宝结算。注册后页面跳转到结算页面</li><li>结算后，重新登录，去「我的账户 &gt; 我的产品」，域名已经显示在你的账户了。</li><li>补充一些注意事项：<ul><li>输入优惠码没有优惠或者优惠幅度较低，请清除浏览器 cookies 再尝试；</li><li>如果没有支付宝支付选项，有可能是使用的优惠码不支持支付宝，请重新清除浏览器 cookies 再尝试；</li><li>注册时用户填写信息时一定要输入正确的邮箱名字，否则修改十分麻烦。</li><li>买完域名之后一定要记得去自己的邮箱查看激活邮件，否则域名激活不了。</li></ul></li></ul><p><strong>域名解析</strong></p><p>买域名是为了自己diy个名字,那怎么把我们原来aierui.github.io(自己的名字自己套)的网页给套到这个网址呢,就需要添加一下解析的记录,然后在github里也填写一下转到的网址,彼此认识一下就好啦!具体来说就是</p><ul><li>在godaddy点击你的账户，管理我的域名。</li><li>点击域名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/10.png" alt="description"></p><ul><li>添加记录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Dinghyt/dlog@1.0/static/image/20201113/11.png" alt="description"></p><p>其中A的两条记录指向的ip地址是github Pages的提供的ip</p><ol><li>192.30.252.153</li><li>192.30.252.154<br>如博客不能登录，有可能是 github 更改了空间服务的 ip 地址，记得及时到在GitHub Pages查看最新的ip即可</li><li>www 指定的记录是你在 github 注册的仓库。<br><strong>GitHub Pages 的设置</strong><br>去到你的aierui.github.io 仓库，点击 CNAME(没有自行创建这个文件) ,再点击右下角的 铅笔 编辑，将 blog.shijinrong.cn 改成你的域名.<br>域名绑定成功，域名解析成功，因此你在浏览中输入aierui.github.io或者现在blog.shijinrong.cn(你的域名,不要blog就主机记录填@就行)均可以访问到主页。</li></ol><blockquote><p>简单来说, 通过本地git的一通操作你就可以把本地的修改推送到github,然后github设置了CNAME,就可以链接到你的域名,在godaddy里设置好解析方式就可以显示出内容啦.后面其实就是基于hexo的框架,修改主题,扩展功能了!</p></blockquote><p><strong>域名服务器</strong><br>就到这里的话,可能会遇到一个问题,就是你会发现你的访问这个域名的时候,会显示不是安全的连接,如果遇到了这个问题,我的解决办法是把dns托管到了CloudFlare上,具体看<a href="https://tzhou2018.github.io/2018/04/%E4%B8%BAGitHub-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%B9%B6%E6%B7%BB%E5%8A%A0SSL-%E5%BC%80%E5%90%AFHTTPS%E5%BC%BA%E5%88%B6/">这里</a>.</p><h2 id="第五步-基础运营"><a href="#第五步-基础运营" class="headerlink" title="第五步:基础运营"></a>第五步:基础运营</h2><p>首先,hexo默认的主题肯定不够cool,那么你就可以去找找别人写好的你觉得好看的主题<a href="https://www.zhihu.com/question/24422335">套</a>.网上搜一搜就可以了.我选的是这个<a href="https://www.notes.worstone.cn/2020/08/01/Hexo%E4%B8%BB%E9%A2%98LiveForCode%E4%BB%8B%E7%BB%8D/">Live for code</a></p><p>讲的非常详细如何操作了.按照他讲的配置就好啦.之后就是写md文件还有老三样(hexo clean; hexo -g; hexo -d).</p><p>如果你看到了这篇文章,没啥问题,说明我搭建成功啦!相信你也可以的!</p><h2 id="谢谢大佬"><a href="#谢谢大佬" class="headerlink" title="谢谢大佬:"></a>谢谢大佬:</h2><ol><li><a href="https://github.com/">Github</a></li><li><a href="https://blog.aierui.com/a/16010316/">如何使用10个小时搭建出个人域名而又Geek的独立博客</a></li><li><a href="https://www.jsdelivr.com/?docs=gh">cdn</a></li><li><a href="https://www.zhihu.com/question/20463581">如何搭建独立博客</a></li><li><a href="https://segmentfault.com/a/1190000018803949">Hexo+Next集成Algolia搜索</a></li><li><a href="https://www.notes.worstone.cn/2020/08/01/Hexo%E4%B8%BB%E9%A2%98LiveForCode%E4%BB%8B%E7%BB%8D/">Hexo主题LiveForCode介绍</a></li><li><a href="https://ioliu.cn/2017/add-valine-comments-to-your-blog/">valine</a></li><li><a href="http://beiyuu.com/github-pages">使用Github Pages建独立博客</a></li><li><a href="https://tzhou2018.github.io/2018/04/%E4%B8%BAGitHub-Pages%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%B9%B6%E6%B7%BB%E5%8A%A0SSL-%E5%BC%80%E5%90%AFHTTPS%E5%BC%BA%E5%88%B6/">为GitHub Pages自定义域名并添加SSL-开启https强制</a></li></ol>]]></content>
    
    
    <summary type="html">小白从零搭建独立blog with github+hexo</summary>
    
    
    
    <category term="skill" scheme="https://idinghy.com/category/skill/"/>
    
    
    <category term="Website" scheme="https://idinghy.com/tag/Website/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题LiveForCode介绍</title>
    <link href="https://idinghy.com/2020/08/01/Hexo%E4%B8%BB%E9%A2%98LiveForCode%E4%BB%8B%E7%BB%8D/"/>
    <id>https://idinghy.com/2020/08/01/Hexo%E4%B8%BB%E9%A2%98LiveForCode%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-07-31T16:00:00.000Z</published>
    <updated>2020-11-13T11:43:46.029Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://hexo.io/zh-cn/">Hexo</a> 是高效的静态站点生成框架，他基于 <a href="https://nodejs.org/en/">Node.js</a>。通过 Hexo 你可以轻松地使用 <a href="https://daringfireball.net/projects/markdown/">Markdown</a> 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 <a href="https://hexo.io/zh-cn/docs/tag-plugins.html">标签插件</a> 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。</p><blockquote><p>你可以访问 <a href="https://hexo.io/zh-cn/docs/">Hexo 的文档</a> 了解如何安装 Hexo</p></blockquote><p>在 Hexo 中有两份主要的配置文件，其名称都是 <code>_config.yml</code>。其中，一份位于 Hexo 根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 <strong>站点配置文件</strong> ， 后者称为 <strong>主题配置文件</strong> 。</p><h2 id="主题预览"><a href="#主题预览" class="headerlink" title="主题预览"></a>主题预览</h2><p><a href="https://www.notes.worstone.cn/">Hexo - Live For Code</a></p><h2 id="安装Live-For-Code"><a href="#安装Live-For-Code" class="headerlink" title="安装Live For Code"></a>安装Live For Code</h2><p>Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至 Hexo 根目录的 themes 目录下，然后修改下配置文件即可。具体到 LiveForCode 来说，安装步骤如下。</p><h3 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h3><p>如果你熟悉 Git，建议你使用 <code>克隆最新版本</code> 的方式，之后的更新可以通过 <code>git pull</code> 来快速更新，而不用再次下载压缩包替换。</p><ol><li>克隆最新版本<br>在终端窗口下，定位到 Hexo 站点目录下。使用 Git Checkout 代码：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd your-hexo-site</span><br><span class="line">git clone https://github.com/first19326/hexo-liveforcode</span><br></pre></td></tr></table></figure><p>将克隆下来的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 themes 目录下。</p><ol start="2"><li>下载稳定版本<br>前往 LiveForCode 版本 发布页面。<br>选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。<br>解压所下载的压缩包，并将解压后的文件夹中的 <code>LiveForCode</code> 文件夹移动至站点的 themes 目录下。</li></ol><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>与所有 Hexo 主题启用的模式一样。当 克隆/下载 完成后，打开 <strong>站点配置文件</strong> ，找到 theme 字段，并将其值更改为 <code>LiveForCode</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">LiveForCode</span></span><br></pre></td></tr></table></figure><p>到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前，我们最好使用 <code>hexo clean</code> 来清除 Hexo 的缓存。</p><h3 id="验证主题"><a href="#验证主题" class="headerlink" title="验证主题"></a>验证主题</h3><p>首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 <code>hexo s --debug</code>。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。当命令行输出中提示出：<br><code>INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</code><br>此时即可使用浏览器访问 <code>http://localhost:4000</code>，检查站点是否正确运行。</p><h2 id="站点设定"><a href="#站点设定" class="headerlink" title="站点设定"></a>站点设定</h2><p>在 <strong>站点配置文件</strong> 中，我修改了标签归档页面、分类归档页面以及文章归档页面的路径，如果大家使用默认的路径，则需要修改 <strong>主题配置文件</strong> 中的菜单设置。 </p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_dir:</span> <span class="string">tag</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archive</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">category</span></span><br></pre></td></tr></table></figure><h2 id="主题设定"><a href="#主题设定" class="headerlink" title="主题设定"></a>主题设定</h2><p>由于 <strong>主题配置文件</strong> 可能有所改动，就不在这里给大家详细说明，我会在 <strong>主题配置文件</strong> 中添加适当的注释，麻烦大家参考页面以及注释内容进行修改。</p><h2 id="第三方服务"><a href="#第三方服务" class="headerlink" title="第三方服务"></a>第三方服务</h2><h3 id="Algolia-Search"><a href="#Algolia-Search" class="headerlink" title="Algolia Search"></a>Algolia Search</h3><p>1.前往 <a href="https://www.algolia.com/">Algolia</a> 注册页面，注册一个新账户。 可以使用 GitHub 或者 Google 账户直接登录，注册后的 14 天内拥有所有功能（包括收费类别的）。之后若未续费会自动降级为免费账户，免费账户总共有 10,000 条记录，每月有 100,000 的可以操作数。注册完成后，创建一个新的 Index，这个 Index 将在后面使用。<br>2.Index 创建完成后，此时这个 Index 里未包含任何数据。 接下来需要安装 <code>Hexo Algolia</code> 扩展，这个扩展的功能是搜集站点的内容并通过 API 发送给 Algolia。前往站点根目录，执行命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure><p>3.编辑 <strong>站点配置文件</strong> ，新增以下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">algolia:</span></span><br><span class="line">  <span class="attr">applicationID:</span> <span class="string">&#x27;applicationID&#x27;</span></span><br><span class="line">  <span class="attr">apiKey:</span> <span class="string">&#x27;apiKey&#x27;</span></span><br><span class="line">  <span class="attr">indexName:</span> <span class="string">&#x27;...&#x27;</span></span><br></pre></td></tr></table></figure><p>注：这里的 applicationID 为 <code>Search-Only API Key</code><br>4.当配置完成，在站点根目录下执行一下命令更新 Index。请注意观察命令的输出。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export HEXO_ALGOLIA_INDEXING_KEY=Admin API Key</span><br><span class="line">hexo algolia</span><br></pre></td></tr></table></figure><p>5.Hexo Algolia 命令设置选项</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Options:</span><br><span class="line">  --dry-run       Does not push content to Algolia (default: false).</span><br><span class="line">  --flush         Resets the Algolia index before starting the indexation (default: false).</span><br><span class="line">  --indexing-key  An algolia API key with add&#x2F;delete records permissions.</span><br><span class="line">              It should be different than the search-only API key configured in _config.yml.</span><br><span class="line">  --layouts       A comma-separated list of page layouts to index (default: &quot;page&quot;).</span><br></pre></td></tr></table></figure><p>说明：<br><code>--flush</code> 如果是 <code>false</code> 则每一次都会直接添加内容到 Algolia 相关的 Index 中，如果不是第一次提交，则将其设置为 <code>true</code><br><code>--layouts</code> 如果使用默认设置，提交的时候会将分类归档、标签归档、赞赏、留言板等页面内容提交到 Algolia， 在搜索的时候，将会搜索到分类归档、标签归档、赞赏、留言板等页面内容，建议使用时将其设置为 <code>post</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo algolia --flush true --layouts post</span><br></pre></td></tr></table></figure><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>1.安装 <code>Hexo-Feed</code> 插件。前往站点根目录，执行命令安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><p>2.根据个人需求，编辑 <strong>站点配置文件</strong> ：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="文章数据统计"><a href="#文章数据统计" class="headerlink" title="文章数据统计"></a>文章数据统计</h3><p>文章数据统计基于 <code>Valine.js</code> 插件实现。<br>实现方式：在文章列表页面加载 <code>Valine.js</code>， 只要 Valine 配置项中的 <code>el</code> 元素不存在即不会加载评论框相关内容。</p><p>1.文章评论数统计<br>Valine 会自动查找页面中 class 值为 <code>valine-comment-count</code> 的元素，获取其 <code>data-xid</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>valine-comment-count</code> 的元素里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- data-xid 将作为查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;valine-comment-count&quot;</span> <span class="attr">data-xid</span>=<span class="string">&quot;&lt;Your/Path/Name&gt;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.文章阅读量统计<br>Valine 从 <code>v1.2.0</code> 开始支持文章阅读量统计。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Valine(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#vcomments&#x27;</span>,</span><br><span class="line">    ...</span><br><span class="line">    visitor: <span class="literal">true</span> <span class="comment">// 阅读量统计</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>如果开启了阅读量统计，Valine 会自动检测 LeanCloud 应用中是否存在 <code>Counter</code> 类，如果不存在会自动创建，无需手动创建。<br>Valine 会自动查找页面中 class 值为 <code>leancloud_visitors</code> 的元素，获取其 <code>id</code> 为查询条件。并将得到的值填充到其 class 的值为 <code>leancloud-visitors-count</code> 的子元素里：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id 将作为查询条件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;&lt;Your/Path/Name&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;leancloud_visitors&quot;</span> <span class="attr">data-flag-title</span>=<span class="string">&quot;Your Article Title&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;leancloud-visitors-count&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="评论列表"><a href="#评论列表" class="headerlink" title="评论列表"></a>评论列表</h3><p>评论功能使用的是 <code>Valine.js</code> 插件，配置详情请参见 <a href="https://valine.js.org/">Valine</a>。</p><blockquote><p>特别说明 <strong>主题配置文件</strong> 中的 Valine 的 <code>appId</code> 与 <code>appKey</code> 请大家自行配置自己的参数。如果评论数据提交到我的 LeanCloud 工作空间，我并不能保证数据的完整性。</p></blockquote><h3 id="赞赏"><a href="#赞赏" class="headerlink" title="赞赏"></a>赞赏</h3><p>赞赏页面使用了 <a href="https://github.com/Kaiyuan/sponsor-page">Sponsor Page</a>，并做了相关修改使其适应博客样式。感兴趣的小伙伴自行去了解吧。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="关于-jQuery-版本"><a href="#关于-jQuery-版本" class="headerlink" title="关于 jQuery 版本"></a>关于 jQuery 版本</h3><p>mCustomScroll 目前暂不支持 <code>jQuery3.5</code> 以及以上版本，否则会导致代码块中的滚动条失效。</p><h3 id="Position-fixed-定位问题"><a href="#Position-fixed-定位问题" class="headerlink" title="Position: fixed 定位问题"></a>Position: fixed 定位问题</h3><p>由于背景动画的 <code>z-index</code> 为 <code>-1</code>，导致在IE浏览器中，菜单等多处 <code>position: fixed</code> 样式的部件出现闪烁抖动的问题，所以默认在IE浏览器中关闭了背景动画。如果是高版本IE，例如IE11则可在设置 -&gt; Internet选项 -&gt; 高级，将浏览中的’使用平滑滚动’选项勾掉，也可以解决这个问题。</p><h3 id="关于-Github-Page-的使用"><a href="#关于-Github-Page-的使用" class="headerlink" title="关于 Github Page 的使用"></a>关于 Github Page 的使用</h3><p>详情请参见 <a href="https://hexo.io/zh-cn/docs/github-pages">将 Hexo 部署到 GitHub Pages</a>。<br>Github Page 支持设置自己的域名，建议在 Hexo 主题的 source 文件夹下新增一个 CNAME 的文件，将自己的域名配置进去，否则每次提交的时候会覆盖掉相关域名设置。<br>在域名的解析设置中，可以使用 CNAME 解析方式，也可以使用 A记录 的方式。如果是 A记录 的方式，则需要检索当前 Github Page 对应的服务器 IP 地址。</p><h3 id="关于-CDN"><a href="#关于-CDN" class="headerlink" title="关于 CDN"></a>关于 CDN</h3><p>CDN 可以在阿里云购买相关的 CDN 服务器，效果肯定是更好，这里使用的是 <a href="https://www.jsdelivr.com/">jsDelivr</a> 免费的 CDN 加速服务。但是有一个弊端，如果修改代码的时候没有Github的相关版本信息，则很容易读取到 jsDelivr 的缓存数据，而不是修改后的最新代码。至于这个缓存时间，我也拿捏不准。不过免费而且效果不错的东西，大家就不要要求太多了。</p><h2 id="阶段计划"><a href="#阶段计划" class="headerlink" title="阶段计划"></a>阶段计划</h2><p>1.使用 Vue.js 重构项目<br>2.整理模板的样式文件<br>3.加入 Pjax，优化页面加载速度<br>4.补充国际化支持语言<br>5.考虑是否加入黑夜模式</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于我还是一名小白，可能还有很多问题无法解决，这个主题也可能存在很多不尽如人意的地方，在细节方面我也会尽力地去修改，也欢迎大家提出自己的问题，以及主题的相关建议，也欢迎大家提交代码。如果觉得这个主题不错，欢迎大家去使用。当然了，如果能赞赏我一下，我也是不介意的。(●ˇ∀ˇ●)</p><p>这个主题可定制的地方目前可能比较少，欢迎大家修改，也希望这个主题能够越来越好看，也希望越来越多的人能够喜欢。</p>]]></content>
    
    
    <summary type="html">Hexo主题LiveForCode介绍.</summary>
    
    
    
    <category term="skill" scheme="https://idinghy.com/category/skill/"/>
    
    
    <category term="Website" scheme="https://idinghy.com/tag/Website/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://idinghy.com/2020/01/01/HelloWorld/"/>
    <id>https://idinghy.com/2020/01/01/HelloWorld/</id>
    <published>2019-12-31T16:00:00.000Z</published>
    <updated>2020-11-13T11:44:38.844Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">Hexo相关资料以及简单的使用教程.</summary>
    
    
    
    <category term="skill" scheme="https://idinghy.com/category/skill/"/>
    
    
    <category term="Website" scheme="https://idinghy.com/tag/Website/"/>
    
  </entry>
  
</feed>
